name: Build, Test, and Deploy to Kubernetes on EC2

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Clean and Build with Maven
      run: |
        mvn clean package -DskipTests

    - name: Build Docker Image
      run: docker build -t welcomeapi:latest .

    - name: Save Docker Image as tar
      run: docker save welcomeapi:latest -o welcomeapi.tar

    - name: Transfer Image and YAML to EC2
      env:
        HOST: ${{ secrets.K8S_MASTER_HOST }}
        KEY: ${{ secrets.K8S_MASTER_KEY }}
      run: |
        echo "$KEY" > key.pem
        chmod 600 key.pem
        scp -o StrictHostKeyChecking=no -i key.pem welcomeapi.tar ec2-user@$HOST:/home/ec2-user/
        scp -o StrictHostKeyChecking=no -i key.pem k8s-deployment.yaml ec2-user@$HOST:/home/ec2-user/

    - name: Deploy on Kubernetes Cluster
      env:
        HOST: ${{ secrets.K8S_MASTER_HOST }}
        KEY: ${{ secrets.K8S_MASTER_KEY }}
      run: |
        echo "$KEY" > key.pem
        chmod 600 key.pem
        ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@$HOST << 'EOF'
        set -e
        echo "===== ðŸš€ Deploying to Kubernetes Cluster ====="

        # Load Docker image to the master node
        sudo docker load -i /home/ec2-user/welcomeapi.tar

        # Apply Deployment YAML
        kubectl apply -f /home/ec2-user/k8s-deployment.yaml

        # Wait for rollout to finish
        kubectl rollout status deployment/welcomeapi-deployment --timeout=120s

        # Display status
        kubectl get pods -o wide
        kubectl get svc welcomeapi-service

        echo "===== âœ… Deployment Successful ====="
        EOF
