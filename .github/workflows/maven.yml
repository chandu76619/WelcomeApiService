name: Build, Test, and Deploy to Kubernetes on EC2

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # 🧩 Step 1: Checkout repository
    - name: Checkout Repository
      uses: actions/checkout@v4

    # 🧩 Step 2: Setup Java 17
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # 🧩 Step 3: Clean and build with Maven
    - name: Clean and Build with Maven
      run: |
        mvn clean
        mvn package -DskipTests

    # 🧩 Step 4: Build Docker image
    - name: Build Docker Image
      run: docker build -t welcomeapi:latest .

    # 🧩 Step 5: Save Docker Image as tar
    - name: Save Docker Image as tar
      run: docker save welcomeapi:latest -o welcomeapi.tar

    # 🧩 Step 6: Copy Image and K8s Files to EC2 (Master Node)
    - name: Transfer Image and YAML to EC2 (Master Node)
      env:
        HOST: ${{ secrets.K8S_MASTER_HOST }}
        KEY: ${{ secrets.K8S_MASTER_KEY }}
      run: |
        echo "$KEY" > key.pem
        chmod 600 key.pem
        scp -o StrictHostKeyChecking=no -i key.pem welcomeapi.tar ec2-user@$HOST:/home/ec2-user/
        scp -o StrictHostKeyChecking=no -i key.pem k8s-deployment.yaml ec2-user@$HOST:/home/ec2-user/

    # 🧩 Step 7: Deploy on Kubernetes Cluster
    - name: Deploy on Kubernetes (EC2 Master)
      env:
        HOST: ${{ secrets.K8S_MASTER_HOST }}
        KEY: ${{ secrets.K8S_MASTER_KEY }}
      run: |
        echo "$KEY" > key.pem
        chmod 600 key.pem
        ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@$HOST << 'EOF'
        set -e
        echo "===== 🚀 Deploying to Kubernetes Cluster ====="

        # 🐳 Load image into local Docker (on master node)
        sudo docker load -i /home/ec2-user/welcomeapi.tar

        # 📦 Import image into Kubernetes nodes (requires Docker runtime)
        IMAGE_ID=$(sudo docker images -q welcomeapi:latest)
        sudo nerdctl --namespace k8s.io load -i /home/ec2-user/welcomeapi.tar || true

        # 🧩 Apply Deployment
        kubectl apply -f /home/ec2-user/k8s-deployment.yaml

        # 🔄 Wait for rollout
        kubectl rollout status deployment/welcomeapi-deployment

        # 🧹 Clean up
        rm -f /home/ec2-user/welcomeapi.tar
        echo "===== ✅ Deployment Successful ====="
        EOF
